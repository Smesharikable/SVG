/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package svg;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.border.TitledBorder;
import javax.swing.event.CellEditorListener;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.*;
import svg.figures.Figure;
import svg.figures.FiguresIndex;
import svg.figures.Union;

/**
 *
 * @author 1
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        panelG = (Graphics2D) MainPanel.getGraphics();
        graphicSettings();
    }
    
    private void graphicSettings() {
        panelG.setColor(Color.getHSBColor(0.5f, 0.8f, 0.8f));
        panelG.setStroke(new BasicStroke(2));
        //panelG.setPaintMode();
    }
    
    private void Skip() {
        x1 = 0;
        x2 = 0;
        y1 = 0;
        y2 = 0;
        rectHeight = 0;
        rectWidth = 0;
        radius = 0;
        index = 0;
    }
    
    private void lockRadioButtons() {
        if (LineRadioButton.isSelected()) {
            CircleRadioButton.setEnabled(!CircleRadioButton.isEnabled());
            RectangleRadioButton.setEnabled(!RectangleRadioButton.isEnabled());
        } else if (CircleRadioButton.isSelected()) {
            LineRadioButton.setEnabled(!LineRadioButton.isEnabled());
            RectangleRadioButton.setEnabled(!RectangleRadioButton.isEnabled());
        } else {
            LineRadioButton.setEnabled(!LineRadioButton.isEnabled());
            CircleRadioButton.setEnabled(!CircleRadioButton.isEnabled());
        }
    }
    
    private class FigureTreeModel extends DefaultTreeModel {
        private SceneManager sceneManager;
        
        public FigureTreeModel(TreeNode root) {
            this(root, false);
        }
        
        public FigureTreeModel(TreeNode root, boolean AskAllowsChildren) {
            super(root, AskAllowsChildren);
        }
        
        public SceneManager getSceneManager() {
            return sceneManager;
        }
        
        public void setSceneManager(SceneManager sceneManager) {
            this.sceneManager = sceneManager;
        }
        
        @Override
        public void valueForPathChanged(TreePath path, Object newValue) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            if (sceneManager != null)
                sceneManager.renameFigure((Figure) node.getUserObject(), (String) newValue);
            else {
                node.setUserObject(newValue);
            }
            nodeChanged(node);
        }
    }
    
    /*
    private class EditTreeModelListener implements TreeModelListener {

        @Override
        public void treeNodesChanged(TreeModelEvent e) {
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode)
                 (e.getTreePath().getLastPathComponent());
            Figure f = (Figure) node.getUserObject();  
            
            try {
                int index = e.getChildIndices()[0];
                node = (DefaultMutableTreeNode) node.getChildAt(index);
            } catch (NullPointerException exc) {}
                      
            sceneManager.renameFigure(f, node.getUserObject().toString());
        }

        @Override
        public void treeNodesInserted(TreeModelEvent e) {
        }

        @Override
        public void treeNodesRemoved(TreeModelEvent e) {
        }

        @Override
        public void treeStructureChanged(TreeModelEvent e) {
        }
        
    } 
    */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ShapeButtonGroup = new javax.swing.ButtonGroup();
        MainPanel = new javax.swing.JPanel() {

            private void drawAdding(Graphics2D g) {
                g.setStroke(new BasicStroke(2));
                g.setColor(Color.BLACK);
                if (LineRadioButton.isSelected()) {
                    g.drawLine(x1, y1, x2, y2);
                    index = FiguresIndex.LINE;
                } else if (CircleRadioButton.isSelected()) {
                    g.drawOval(x1 - radius / 2, y1 - radius / 2, radius, radius);
                    index = FiguresIndex.CIRCLE;
                } else {
                    g.drawRect(Math.min(x1, x2), Math.min(y1, y2), rectWidth, rectHeight);
                    index = FiguresIndex.RECTANGLE;
                }
            }

            @Override
            public void paintComponent(java.awt.Graphics g) {
                super.paintComponent(g);
                sceneManager.drawFigures((Graphics2D) g);
                if (adding) drawAdding((Graphics2D) g);
            }
        };
        TreeScrollPane = new javax.swing.JScrollPane();
        root = new javax.swing.tree.DefaultMutableTreeNode(new Union("Base scene union"));
        treeModel = new FigureTreeModel(root);
        ShapeTree = new javax.swing.JTree(treeModel);
        sceneManager = new SceneManager(this, ShapeTree);
        ((FigureTreeModel) treeModel).setSceneManager(sceneManager);
        ShapeTree.setRootVisible(false);
        ShapeTree.setEditable(true);
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(15, 0), new java.awt.Dimension(15, 0), new java.awt.Dimension(15, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        RadioButtonsPanel = new javax.swing.JPanel();
        CircleRadioButton = new javax.swing.JRadioButton();
        LineRadioButton = new javax.swing.JRadioButton();
        RectangleRadioButton = new javax.swing.JRadioButton();
        ScaleMovePanel = new javax.swing.JPanel();
        ScaleTextField = new javax.swing.JTextField();
        ScaleButton = new javax.swing.JButton();
        MoveButton = new javax.swing.JButton();
        MovedxTextField = new javax.swing.JTextField();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        CreateButton = new javax.swing.JButton();
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        MovedyTextField = new javax.swing.JTextField();
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 32767));
        DeleteSavePanel = new javax.swing.JPanel();
        SaveButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        MainMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        SaveMenuItem = new javax.swing.JMenuItem();
        OpenMenuItem = new javax.swing.JMenuItem();
        UnionMenu = new javax.swing.JMenu();
        ComposeMenuItem = new javax.swing.JMenuItem();
        ExcludeMenuItem = new javax.swing.JMenuItem();
        AddMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scene");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("MainFrame");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        MainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 255, 204), new java.awt.Color(0, 102, 102)), "Please, add new figure", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        MainPanel.setName("MainPanel");

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(MainPanel, gridBagConstraints);
        MainPanel.getAccessibleContext().setAccessibleName("");
        panelBorder = (TitledBorder) MainPanel.getBorder();
        MainPanel.addMouseListener( new MouseListener() {

            @Override
            public void mouseReleased(MouseEvent e) {
                if (!adding) {
                    newfigure = true;
                }
            }

            @Override
            public void mousePressed(MouseEvent evt) {
                adding = !adding;
                if (adding) {
                    newfigure = false;
                    x1 = evt.getX();
                    y1 = evt.getY();
                    lockRadioButtons();
                    panelBorder.setTitle("Adding new Figure");
                } else {
                    lockRadioButtons();
                    panelBorder.setTitle("Figure added");
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseClicked(MouseEvent evt) {
                System.out.println(":MOUSE_CLICKED_EVENT:");
            }
        });

        MainPanel.addMouseMotionListener( new MouseMotionListener() {

            @Override
            public void mouseMoved(MouseEvent evt) {
                if (adding) {
                    x2 = evt.getX();
                    y2 = evt.getY();
                    if (CircleRadioButton.isSelected()) {
                        radius = (int) Math.round(1.5 * Math.sqrt((x1 - x2) * (x1 - x2)
                            + (y1 - y2) * (y1 - y2)));
                } else if (RectangleRadioButton.isSelected()) {
                    rectWidth = Math.abs(x1 - x2);
                    rectHeight = Math.abs(y1 - y2);
                }
                MainPanel.repaint();
            }
        }

        @Override
        public void mouseDragged(MouseEvent e) {
        }

    });

    TreeScrollPane.setName("TreeScrollPane");

    ShapeTree.setName("ShapeTree");
    TreeScrollPane.setViewportView(ShapeTree);
    ShapeTree.getAccessibleContext().setAccessibleName("");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 30;
    gridBagConstraints.ipady = 30;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    getContentPane().add(TreeScrollPane, gridBagConstraints);
    TreeScrollPane.getAccessibleContext().setAccessibleName("TreeScrollPane");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    getContentPane().add(filler1, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    getContentPane().add(filler2, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 8;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    getContentPane().add(filler5, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 2;
    getContentPane().add(filler6, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(filler3, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(filler4, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    getContentPane().add(filler7, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.gridwidth = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(filler8, gridBagConstraints);

    RadioButtonsPanel.setName("RadioButtonsPanel");
    RadioButtonsPanel.setLayout(new java.awt.GridBagLayout());

    ShapeButtonGroup.add(CircleRadioButton);
    CircleRadioButton.setText("Circle");
    CircleRadioButton.setName("CircleRadioButton");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    RadioButtonsPanel.add(CircleRadioButton, gridBagConstraints);
    CircleRadioButton.getAccessibleContext().setAccessibleName("CircleRadioButton");

    ShapeButtonGroup.add(LineRadioButton);
    LineRadioButton.setSelected(true);
    LineRadioButton.setText("Line");
    LineRadioButton.setName("LineRadioButton");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    RadioButtonsPanel.add(LineRadioButton, gridBagConstraints);
    LineRadioButton.getAccessibleContext().setAccessibleName("LineRadioButton");

    ShapeButtonGroup.add(RectangleRadioButton);
    RectangleRadioButton.setText("Rectangle");
    RectangleRadioButton.setName("RectangleRadioButton");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    RadioButtonsPanel.add(RectangleRadioButton, gridBagConstraints);
    RectangleRadioButton.getAccessibleContext().setAccessibleName("RectangleRadioButton");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridheight = 4;
    getContentPane().add(RadioButtonsPanel, gridBagConstraints);
    RadioButtonsPanel.getAccessibleContext().setAccessibleName("RadioButtonsPanel");

    ScaleMovePanel.setName("ScaleMovePanel");
    ScaleMovePanel.setLayout(new java.awt.GridBagLayout());

    ScaleTextField.setName("ScaleTextField");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.weightx = 0.1;
    ScaleMovePanel.add(ScaleTextField, gridBagConstraints);
    ScaleTextField.getAccessibleContext().setAccessibleName("ScaleTextField");

    ScaleButton.setText("Scale");
    ScaleButton.setName("ScaleButton");
    ScaleButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ScaleButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 0.2;
    ScaleMovePanel.add(ScaleButton, gridBagConstraints);
    ScaleButton.getAccessibleContext().setAccessibleName("ScaleButton");

    MoveButton.setText("Move");
    MoveButton.setName("MoveButton");
    MoveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            MoveButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 0.2;
    ScaleMovePanel.add(MoveButton, gridBagConstraints);
    MoveButton.getAccessibleContext().setAccessibleName("MoveButton");

    MovedxTextField.setName("MovedxTextField");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.weightx = 0.1;
    ScaleMovePanel.add(MovedxTextField, gridBagConstraints);
    MovedxTextField.getAccessibleContext().setAccessibleName("MoveTextField");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    ScaleMovePanel.add(filler9, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 1;
    ScaleMovePanel.add(filler10, gridBagConstraints);

    CreateButton.setText("Create");
    CreateButton.setName("CreateButton");
    CreateButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            CreateButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    ScaleMovePanel.add(CreateButton, gridBagConstraints);
    CreateButton.getAccessibleContext().setAccessibleName("CreateButton");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    ScaleMovePanel.add(filler12, gridBagConstraints);

    MovedyTextField.setName("MovedyTextField");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    ScaleMovePanel.add(MovedyTextField, gridBagConstraints);
    MovedyTextField.getAccessibleContext().setAccessibleName("MovedyTextField");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 2;
    ScaleMovePanel.add(filler13, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.30000000000000004;
    getContentPane().add(ScaleMovePanel, gridBagConstraints);
    ScaleMovePanel.getAccessibleContext().setAccessibleName("ScaleMovePanel");

    DeleteSavePanel.setLayout(new java.awt.GridBagLayout());

    SaveButton.setText("Save");
    SaveButton.setName("SaveButton");
    SaveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            SaveButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    DeleteSavePanel.add(SaveButton, gridBagConstraints);
    SaveButton.getAccessibleContext().setAccessibleName("SaveButton");

    DeleteButton.setText("Delete");
    DeleteButton.setName("DeleteButton");
    DeleteButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DeleteButtonActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    DeleteSavePanel.add(DeleteButton, gridBagConstraints);
    DeleteButton.getAccessibleContext().setAccessibleName("DeleteButton");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    DeleteSavePanel.add(filler11, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 7;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(DeleteSavePanel, gridBagConstraints);
    DeleteSavePanel.getAccessibleContext().setAccessibleName("DeleteSavePanel");

    MainMenuBar.setName("MainMenuBar");

    FileMenu.setText("File");
    FileMenu.setName("FileMenu");

    SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    SaveMenuItem.setText("Save");
    SaveMenuItem.setName("SaveMenuItem");
    SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            SaveMenuItemActionPerformed(evt);
        }
    });
    FileMenu.add(SaveMenuItem);
    SaveMenuItem.getAccessibleContext().setAccessibleName("SaveMenuItem");

    OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    OpenMenuItem.setText("Open");
    OpenMenuItem.setName("OpenMenuItem");
    OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OpenMenuItemActionPerformed(evt);
        }
    });
    FileMenu.add(OpenMenuItem);
    OpenMenuItem.getAccessibleContext().setAccessibleName("OpenMenuItem");

    MainMenuBar.add(FileMenu);
    FileMenu.getAccessibleContext().setAccessibleName("FileMenu");

    UnionMenu.setText("Union");
    UnionMenu.setName("UnionMenu");

    ComposeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
    ComposeMenuItem.setText("Compose");
    ComposeMenuItem.setName("ComposeMemuItem");
    ComposeMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ComposeMenuItemActionPerformed(evt);
        }
    });
    UnionMenu.add(ComposeMenuItem);
    ComposeMenuItem.getAccessibleContext().setAccessibleName("ComposeMenuItem");

    ExcludeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
    ExcludeMenuItem.setText("Exclude");
    ExcludeMenuItem.setName("ExcludeMenuItem");
    ExcludeMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ExcludeMenuItemActionPerformed(evt);
        }
    });
    UnionMenu.add(ExcludeMenuItem);
    ExcludeMenuItem.getAccessibleContext().setAccessibleName("ExcludeMenuItem");

    AddMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK));
    AddMenuItem.setText("Add");
    AddMenuItem.setName("AddMenuItem");
    UnionMenu.add(AddMenuItem);
    AddMenuItem.getAccessibleContext().setAccessibleName("AddMenuItem");

    MainMenuBar.add(UnionMenu);
    UnionMenu.getAccessibleContext().setAccessibleName("UnionMenu");

    setJMenuBar(MainMenuBar);
    MainMenuBar.getAccessibleContext().setAccessibleName("MainMenuBar");

    getAccessibleContext().setAccessibleDescription("Окно редактирования");

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        if (newfigure) {
            if (index == FiguresIndex.LINE) {
                currentFigure = new Line2D.Double(x1, y1, x2, y2);
                shapeName = "Line";
            } else if (index == FiguresIndex.CIRCLE) {
                currentFigure = new Ellipse2D.Double(x1 - radius / 2, y1 - radius / 2, radius, radius);
                shapeName = "Circle";
            } else {
                currentFigure = new Rectangle2D.Double(Math.min(x1, x2), Math.min(y1, y2), rectWidth, rectHeight);
                shapeName = "Rectangle";
            }
            sceneManager.createFigure(index, currentFigure, shapeName, panelG);
            Skip();
            newfigure = false;
            MainPanel.repaint();
            //sceneManager.drawFigures(panelG);
        }
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void MoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveButtonActionPerformed
        try {
            double dx = Double.parseDouble(MovedxTextField.getText().trim());
            double dy = Double.parseDouble(MovedyTextField.getText().trim());
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) ShapeTree.getLastSelectedPathComponent();
            if (node != null){
                sceneManager.moveFigure(dx, dy, node);
                MainPanel.repaint();
            }  
        } catch (java.lang.NumberFormatException ex) {
            Logger.getLogger(SceneManager.class.getName()).log(Level.SEVERE, "Uncorrect data for move", ex);
        } catch (java.lang.NullPointerException ex) {
            Logger.getLogger(SceneManager.class.getName()).log(Level.SEVERE, "Can't move figure", ex);
        }
    }//GEN-LAST:event_MoveButtonActionPerformed

    private void ScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScaleButtonActionPerformed
        try {
            double scale = Double.parseDouble(ScaleTextField.getText().trim());
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) ShapeTree.getLastSelectedPathComponent();
            if (node != null) {
                sceneManager.scaleCommand(scale, node);
                MainPanel.repaint();
            }
        } catch (java.lang.NumberFormatException ex) {
            Logger.getLogger(SceneManager.class.getName()).log(Level.SEVERE, "Uncorrect data for move", ex);
        } catch (java.lang.NullPointerException ex) {
            Logger.getLogger(SceneManager.class.getName()).log(Level.SEVERE, "Can't move figure", ex);
        }
    }//GEN-LAST:event_ScaleButtonActionPerformed

    private void ComposeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComposeMenuItemActionPerformed
        sceneManager.composeFigures();
        System.out.println("Compose");
    }//GEN-LAST:event_ComposeMenuItemActionPerformed

    private void ExcludeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcludeMenuItemActionPerformed
        sceneManager.excludeFigures();
        System.out.println("Exclude");
    }//GEN-LAST:event_ExcludeMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        sceneManager.saveScene();
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        sceneManager.openScene();
        MainPanel.repaint();
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        sceneManager.saveScene();
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        sceneManager.deleteFigure();
        MainPanel.repaint();
    }//GEN-LAST:event_DeleteButtonActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddMenuItem;
    private javax.swing.JRadioButton CircleRadioButton;
    private javax.swing.JMenuItem ComposeMenuItem;
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JPanel DeleteSavePanel;
    private javax.swing.JMenuItem ExcludeMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JRadioButton LineRadioButton;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton MoveButton;
    private javax.swing.JTextField MovedxTextField;
    private javax.swing.JTextField MovedyTextField;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JPanel RadioButtonsPanel;
    private javax.swing.JRadioButton RectangleRadioButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JButton ScaleButton;
    private javax.swing.JPanel ScaleMovePanel;
    private javax.swing.JTextField ScaleTextField;
    private javax.swing.ButtonGroup ShapeButtonGroup;
    private javax.swing.JTree ShapeTree;
    private javax.swing.JScrollPane TreeScrollPane;
    private javax.swing.JMenu UnionMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    // End of variables declaration//GEN-END:variables
    private javax.swing.tree.DefaultMutableTreeNode root;
    private javax.swing.tree.DefaultTreeModel treeModel;
    private SceneManager sceneManager;
    private Graphics2D panelG;
    private boolean adding = false;
    private boolean newfigure = false;
    private Shape currentFigure;
    private String shapeName;
    private int index;
    private int x1;
    private int y1;
    private int x2;
    private int y2;
    private int radius;
    private int rectHeight;
    private int rectWidth;
    private TitledBorder panelBorder;
}
